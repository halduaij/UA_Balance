----------------------------------------
-- File: 'chaosrhinotactic.ai'
-- Edited by Thudmeizer	    @ 20.06.2016

--[[

	CHAOS VEHICLE ABILITY ID TABLE

Chaos Rhino Abilities

"chaos_smoke_launchers"          225
"all_transport_abilityrecharge"  34
"all_transport_heal"             35
"all_transport_reinforce"        36
"chaos_laymines"                 182

Chaos Attackbike Abilities

"chaos_flashbang_grenades"       138
"chaos_frag_grenades"            141
"chaos_inferno_grenades"         166
"chaos_krak_grenades"            180
"chaos_melta_bombs_havoc"        194
"chaos_smoke_grenades"           224
"marines_burnout"                1453

Chaos Land Raider Abilities

"chaos_daemonic_hull"           101
"chaos_smoke_launchers_land_raider" 226

Brass Scorpion Abilities

"chaos_brass_let_it_burn"       65
"chaos_brass_wildfire"          66
"chaos_entrench"                126

" Titan Abilities

"titan_stomp"                   2443
"titan_turret_mode"             2444
"marines_apocalypse_missiles"   1445

" Hell Talon Abilities

"chaos_biotoxin_rocket"         46

" Death Wheel Abilities

"chaos_selfdestruct"            221

]]--

class 'ChaosRhinoTactic' (ChaosMarineVehicleTactic)



function ChaosRhinoTactic:__init(squad_ai)
	super(squad_ai)

	self:SetName("Chaos Rhino Tactic")

	Tactic.AssignStateFunction(self, Tactic.States.Idle, ChaosRhinoTactic.BeginIdleState)
	Tactic.AssignStateFunction(self, Tactic.States.Hold, ChaosRhinoTactic.BeginHoldState)
	Tactic.AssignStateFunction(self, Tactic.States.Retreat, ChaosRhinoTactic.BeginRetreatState)
	Tactic.AssignStateFunction(self, Tactic.States.Attack, ChaosRhinoTactic.BeginAttackState)

	-- Vehicle is a light transport
	self.m_iTransportVehicle = 1
	self.m_iTransportSlots = 2
end

function ChaosRhinoTactic:IsAttacker()
	return (self.m_iUnloadTries > 0 or self.squad_ai:CanDoAbility(ChaosRhino.smoke_id))
end

function ChaosRhinoTactic:IsDefender()
	return (self.m_iUnloadTries > 0 or self.squad_ai:CanDoAbility(ChaosRhino.smoke_id))
end

function ChaosRhinoTactic:BeginIdleState()
	self:TransportMove()
	Tactic.SetSubState(self, self.IdleState, "Holding")
end

function ChaosRhinoTactic:BeginHoldState()
	self:TransportMove()
	Tactic.SetSubState(self, self.HoldState, "Holding")
end

function ChaosRhinoTactic:BeginRetreatState()
	self:TransportMove()
	Tactic.SetSubState(self, self.HoldState, "Holding")
end

function ChaosRhinoTactic:BeginAttackState()
	self:TransportMove()
	Tactic.SetSubState(self, self.AttackingState, "Attacking")
end

function ChaosRhinoTactic:TransportMove()
	-- Check if we're busy
	if (self:IsInSubState() or self:CheckGatherMove()) then
		return
	end

	-- Check move delay
	if (g_iGMT < self.m_iMoveDelay + 3 and self:IsMoving()) then
		return
	end

	-- Try to unload troops
	local vSquadPos = self.squad_ai:GetPosition()
	local iDistance = distance_sqr(self:GetTarget(), vSquadPos)
	if (self:UnloadTroops(iDistance)) then
		self.m_iMoveDelay = g_iGMT
		return
	end

	-- Check distance
	if (self.squad_ai:WasRecentlyHurt()) then
		cpu_manager:DoMove(self.squad_ai, cpu_manager.start_pos, false, "RetreatMove")
		self.m_iMoveDelay = g_iGMT
		return
	elseif (iDistance > sqr(35)) then
		cpu_manager:DoMove(self.squad_ai, self:GetTarget(), false, "TransportMove")
	elseif (iDistance > sqr(20) and not cpu_manager.terrain_analyzer:HasThreat(vSquadPos, 35)) then
		cpu_manager:DoMove(self.squad_ai, self:GetTarget(), false, "TransportMove")
	else
		self.squad_ai:DoStop()
	end
	self.m_iMoveDelay = g_iGMT
end

-- Chaos Rhino DoAbilities
function ChaosRhinoTactic:DoAbilities()
	-- Check if we can launch smoke
	if (self.squad_ai:CanDoAbility(225)) then -- smoke_id
		-- Search a squad
		local iRange = self.squad_ai:GetAbilityRange(225)
		local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
		if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 150) then
			self.squad_ai:DoSpecialAbilitySquad(225, oUnit:GetSquad())
		end
	end

	local iRequisition = resource_manager:GetResourceAmount():Get(ResourceAmount.RT_Requisition)
	local iPower = resource_manager:GetResourceAmount():Get(ResourceAmount.RT_Power)

	-- Try to activate lay mines
	if (self.squad_ai:CanDoAbility(182)) then -- laymines_id
		if (iRequisition >= 4000 and iPower >= 4000 and self:IsMoving()) or
			(iRequisition >= 1000 and iPower >= 1000 and self.squad_ai:IsInCombat()) then
			self.squad_ai:DoSpecialAbility(182)
		end
	end

	-- Search a squad to heal
	local iRange = self.squad_ai:GetAbilityRange(35) -- heal_id
	local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
	if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 150) then
		self.squad_ai:DoSpecialAbility(35)
	end

	-- Search a squad to recharge abilities
	local iRange = self.squad_ai:GetAbilityRange(34) -- abilityrecharge_id
	local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
	if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 250) then
		self.squad_ai:DoSpecialAbility(34)
	end

	-- Search a squad to help reinforce
	local iRange = self.squad_ai:GetAbilityRange(36) -- reinforce_id
	local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
	if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) < 150 and oUnit:GetNumTroopers() <= 2) then
		self.squad_ai:DoSpecialAbilitySquad(36, oUnit:GetSquad())
	end
end

----------------------------------------
-- File: 'chaosthunderhawkttactic.ai'
-- Edited by Thudmeizer     @ 23.04.2016

class 'ChaosThunderhawkTactic' (ChaosMarineVehicleTactic)



function ChaosThunderhawkTactic:__init(squad_ai)
	super(squad_ai)

	self:SetName("Chaos Thunderhawk Tactic")

	-- Vehicle is a heavy transport
	self.m_iTransportVehicle = 1
	self.m_iTransportSlots = 4
end

-- Chaos Thunderhawk is allowed to retreat even directly after a jump
function ChaosThunderhawkTactic:SetTarget(target, variant_type)
	self.variant_type = variant_type
	self.variant_type = variant_type
	if self.variant_type == Tactic.Variant.Vector then
		self.target = Vector3f(target)
	elseif self.variant_type == Tactic.Variant.SquadAI then
		self.target = target
	elseif self.variant_type == Tactic.Variant.BaseAI then
		self.target = target
	end
	self.m_iMoveDelay = 0
	self.last_jump = 0
end

function ChaosThunderhawkTactic:DoAbilities()
	-- Call standard method
	ChaosMarineVehicleTactic.DoAbilities(self)
end

function ChaosThunderhawkTactic:JumpAttackRanged()
	-- Call standard method
	if (Tactic.JumpAttackRanged(self)) then
		return true
	end

	-- Get position and jump range
	local vChaosThunderhawkPosition = self.squad_ai:GetPosition()
	local iJumpRange = sqr(self.squad_ai:GetJumpDistance())

	-- Check if we can jump directly to the target
	local iClosestDistance = distance_sqr(vChaosThunderhawkPosition, self:GetTarget())
	local vTargetPos = nil
	if (iClosestDistance < iJumpRange) then
		vTargetPos = self:GetTarget()
	else
		-- Get closest squad to target position
		for oSquad in military_manager:GetSquads() do
			-- Check if squad is valid
			if (oSquad:IsValid()) then
				-- Check distance
				local vPosition = oSquad:GetPosition()
				local iDistanceToChaosThunderhawk = distance_sqr(vPosition, vChaosThunderhawkPosition)
				local iDistanceToTarget = distance_sqr(vPosition, self:GetTarget())
				if (iDistanceToChaosThunderhawk < iJumpRange and iDistanceToTarget < iClosestDistance) then
					iClosestDistance = iDistanceToTarget
					vTargetPos = vPosition
				end
			end
		end

		-- Get closest building to target position
		for oBuilding in military_manager:GetBases() do
			-- Check if building is valid
			if (oBuilding:IsValid()) then
				-- Check distance
				local vPosition = oBuilding:GetPosition()
				local iDistanceToChaosThunderhawk = distance_sqr(vPosition, vChaosThunderhawkPosition)
				local iDistanceToTarget = distance_sqr(vPosition, self:GetTarget())
				if (iDistanceToChaosThunderhawk < iJumpRange and iDistanceToTarget < iClosestDistance) then
					iClosestDistance = iDistanceToTarget
					vTargetPos = vPosition
				end
			end
		end
	end

	-- Don't jump if we didn't find a target
	if (vTargetPos == nil or distance_sqr(vChaosThunderhawkPosition, vTargetPos) < sqr(50)) then
		return false
	end

	-- Try to jump to target
	for iLoop1 = 1, 5 do
		-- Create a jump position
		local vJumpPosition = vTargetPos
		vJumpPosition.x = vJumpPosition.x + math.random(-15, 15)
		vJumpPosition.z = vJumpPosition.z + math.random(-15, 15)

		-- Check if target position is in range and if unit is able to jump to target position
		local iDistance = distance_sqr(vJumpPosition, vChaosThunderhawkPosition)
		if (iDistance <= iJumpRange and self.squad_ai:CanJumpToPosition(vJumpPosition)) then
			-- Jump to position
			self.squad_ai:DoJump(vJumpPosition)
			self.last_jump = g_iGMT
			self.m_iLastGatherMove = self.last_jump - 10
			return true
		end
	end
	return false
end

--[[
function ChaosThunderhawkTactic:UnloadTroops()

	local vSquadPos = self.squad_ai:GetPosition()
	if (cpu_manager.terrain_analyzer:HasThreat(vSquadPos, 100) and self.squad_ai:CanUnload()) then

		-- Unload all troops when enemy is in the distance
		self.squad_ai:DoUnload()
	end
end
]]
function ChaosThunderhawkTactic:Update()
	if (self:IsComplete()) then
		return
	end

	-- State machine
	if (not VehicleTactic.Update(self)) then
		return
	end

	-- Check if we are in serious trouble
	self:EmergencyRetreat()
end

----------------------------------------
-- File: 'deathwheeltactic.ai'
-- Edited by Thudmeizer	@ 12.02.2016

class 'DeathWheelTactic' (ChaosMarineVehicleTactic)



function DeathWheelTactic:__init(squad_ai)
	super(squad_ai)

	self:SetName("Death Wheel Tactic")
end

function DeathWheelTactic:AlwaysAttack()
	return true
end

function DeathWheelTactic:DoAbilities()
	if (self.squad_ai:WasRecentlyHurt() and self.squad_ai:GetHealthPercentage() < 0.3) then
		Ability.DoAbilityArea(self.squad_ai, 221, Ability.Filters.CloseEnemy, 20, 10)
	end
end

----------------------------------------
-- File: 'helltalontactic.ai'
-- Edited by Thudmeizer @ 01.11.2007

class 'HellTalonTactic' (ChaosMarineVehicleTactic)

function HellTalonTactic:__init(squad_ai)
	super(squad_ai)

	self:SetName("Hell Talon Tactic")
end

function HellTalonTactic:DoAbilities()
	-- Biotoxin Rockets (ID: 46)
	Ability.DoAbilityPos(self.squad_ai, 46, Ability.Filters.CloseInfantryEnemy, 8)
	Ability.DoAbilityPos(self.squad_ai, 46, Ability.Filters.CloseMonsterEnemy, 1)
	Ability.DoAbilityPos(self.squad_ai, 46, Ability.Filters.CloseCommanderEnemy, 1)

	-- We are dying, lower requisites for attacks
	if (self.squad_ai:WasRecentlyHurt() and self.squad_ai:GetHealthPercentage() < 0.4) then
		Ability.DoAbilityPos(self.squad_ai, 46, Ability.Filters.CloseInfantryEnemy, 4)
	end
end

----------------------------------------
-- File: 'assaultpodtactic.ai'
-- Edited by Thudmeizer	@ 23.04.2016

class 'AssaultPodTactic' (ChaosMarineVehicleTactic)



function AssaultPodTactic:__init(squad_ai)
	super(squad_ai)

	self:SetName("Assault Pod Tactic")

	-- Vehicle is a light transport
	self.m_iTransportVehicle = 3
	self.m_iTransportSlots = 2
end

-- Assault Pod is allowed to retreat even directly after a jump
function AssaultPodTactic:SetTarget(target, variant_type)
	self.variant_type = variant_type
	self.variant_type = variant_type
	if self.variant_type == Tactic.Variant.Vector then
		self.target = Vector3f(target)
	elseif self.variant_type == Tactic.Variant.SquadAI then
		self.target = target
	elseif self.variant_type == Tactic.Variant.BaseAI then
		self.target = target
	end
	self.m_iMoveDelay = 0
	self.last_jump = 0
end

function AssaultPodTactic:AlwaysAttack()
	return true
end

function AssaultPodTactic:DoAbilities()
	Ability.DoAbilityArea(self.squad_ai, 182, Ability.Filters.CloseEnemy, 30, 1) -- laymines_id
end

function AssaultPodTactic:UnloadTroops()
	local vSquadPos = self.squad_ai:GetPosition()
	if (cpu_manager.terrain_analyzer:HasThreat(vSquadPos, 100) and self.squad_ai:CanUnload()) then
		-- Unload all troops when enemy is in the distance
		self.squad_ai:DoUnload()
	end
end

function AssaultPodTactic:Update()
	if (self:IsComplete()) then
		return
	end

	-- State machine
	if (not VehicleTactic.Update(self)) then
		return
	end

	-- Check if we are in serious trouble
	self:EmergencyRetreat()
end

----------------------------------------
-- File: 'chaosattackbiketactic.ai'
-- Created by Cylarne
-- Edited by Thudmeizer		@ 23.09.2016

class 'ChaosAttackbikeTactic' (ChaosMarineVehicleTactic)



function ChaosAttackbikeTactic:__init(squad_ai)
	super(squad_ai)

	self:SetName("Chaos Attackbike Tactic")
end

function ChaosAttackbikeTactic:DoAbilities()
	-- Activate various targetted abilities
	Ability.DoAbilityTarget(self.squad_ai, 138, Ability.Filters.CloseSquadEnemy, 4)    -- flashbang_id
	Ability.DoAbilityTarget(self.squad_ai, 141, Ability.Filters.CloseEnemy, 4)         -- frag_id
	Ability.DoAbilityTarget(self.squad_ai, 166, Ability.Filters.CloseInfantryEnemy, 3) -- inferno_id
	Ability.DoAbilityTarget(self.squad_ai, 180, Ability.Filters.CloseVehicleEnemy, 1)  -- krak_id
	Ability.DoAbilityTarget(self.squad_ai, 194, Ability.Filters.CloseVehicleEnemy, 1)  -- melta_id

	-- Check if we can use burn out if enemy infantry are nearby
	Ability.DoAbilityArea(self.squad_ai, 1453, Ability.Filters.CloseInfantryEnemy, 10, 4) -- burnout_id

	-- Check if we can launch smoke
	if (self.squad_ai:CanDoAbility(224)) then -- smoke_id
		-- Search a squad
		local iRange = self.squad_ai:GetAbilityRange(224)
		local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
		if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 40) then
			self.squad_ai:DoSpecialAbilitySquad(224, oUnit:GetSquad())
		end
	end
end

function ChaosAttackbikeTactic:Upgrade()
	-- If there are no ressources available, don't upgrade!
	if (not Tactic.Options.can_reinforce) then
		return
	end

	local class_type = cpu_manager:FindClosestEnemyPlayer():GetMajorityClassType()
	self.squad_ai:DoBestUpgrade(class_type)
end

function ChaosAttackbikeTactic:AlwaysAttack()
	return true
end

function ChaosAttackbikeTactic:CanOnlyDecap()
	return true
end

----------------------------------------
-- File: 'chaoslandraidertactic.ai'
-- Edited by Cylarne_04 2011
-- Edited by Thudmeizer	20.06.2016

class 'ChaosLandRaiderTactic' (ChaosMarineVehicleTactic)


function ChaosLandRaiderTactic:__init(squad_ai)
	super(squad_ai)

	self:SetName("Chaos Land Raider Tactic")

	-- Vehicle is a heavy transport
	self.m_iTransportVehicle = 2
	self.m_iTransportSlots = 3
end

-- Chaos Land Raider DoAbilities
function ChaosLandRaiderTactic:DoAbilities()
	-- Check machine spirit while stationary
	if (self.squad_ai:WasRecentlyHurt() and not self.squad_ai:IsInStateMove() and not self.squad_ai:IsInStateAttackMove()) then
		if (self.squad_ai:CanDoAbility(101)) then -- spirit_id
			self.squad_ai:DoSpecialAbility(101)
		end
	end

	-- Check if we can launch smoke
	if (self.squad_ai:CanDoAbility(226)) then -- smoke_id
		local iRange = self.squad_ai:GetAbilityRange(226)
		local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
		if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 150) then
			self.squad_ai:DoSpecialAbilitySquad(226, oUnit:GetSquad())
		end
	end

	-- Transport abilities (same as Rhino)
	local iRange = self.squad_ai:GetAbilityRange(35) -- heal_id
	local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
	if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 150) then
		self.squad_ai:DoSpecialAbility(35)
	end

	iRange = self.squad_ai:GetAbilityRange(34) -- abilityrecharge_id
	oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
	if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 250) then
		self.squad_ai:DoSpecialAbility(34)
	end

	iRange = self.squad_ai:GetAbilityRange(36) -- reinforce_id
	oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
	if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) < 150 and oUnit:GetNumTroopers() <= 2) then
		self.squad_ai:DoSpecialAbilitySquad(36, oUnit:GetSquad())
	end
end

----------------------------------------
-- File: 'brasscorpiontactic.ai'
-- Edited by Cylarne_04 2011
-- Edited by Thudmeizer	@ 14.03.2016

class 'BrassScorpionTactic' (ChaosMarineVehicleTactic)


function BrassScorpionTactic:__init(squad_ai)
	super(squad_ai)

	self:SetName("Brass Scorpion Tactic")

	-- Add a choice to stay in ranged or melee combat.
	self.choice_ranged_melee = math.random(1, 100)
end

function BrassScorpionTactic:AlwaysAttack()
	return true
end

-- Brass Scorpion DoAbilities
function BrassScorpionTactic:DoAbilities()
	if (self.squad_ai:IsAttacking() and self.squad_ai:CanDoAbility(65)) then -- flame_id
		Ability.DoAbilityPos(self.squad_ai, 65, Ability.Filters.CloseEnemy, 6)
	end

	if (self.squad_ai:IsAttacking() and self.squad_ai:CanDoAbility(66)) then -- wildfire_id
		Ability.DoAbilityArea(self.squad_ai, 66, Ability.Filters.CloseEnemy, 15, 10)
	end

	-- Desecration ability
	local conditionsMet = (self.squad_ai:GetHealthPercentage() > 0.5 and
		Ability.Filters.CloseEnemy(self.squad_ai:GetPosition(), 90, 1) ~= nil and
		Ability.Filters.CloseEnemy(self.squad_ai:GetPosition(), 20, 1) == nil)

	if (self.squad_ai:IsUsingAbility(126)) then -- entrench_id
		if not conditionsMet then
			self.squad_ai:DoSpecialAbility(126)
		end
	elseif conditionsMet then
		self.squad_ai:DoSpecialAbility(126)
	end
end

function BrassScorpionTactic:Update()
	if (self:IsComplete()) then
		return
	end

	-- State machine
	if (not VehicleTactic.Update(self)) then
		return
	end

	-- Set unit on ranged stance by a 50/50 chance.
	if (self.squad_ai:GetMeleeStance() == SquadAI.MSTANCE_Assault and cpu_manager:GetTierLevel() >= 5 and self.choice_ranged_melee >= 50) then
		self.squad_ai:DoSetMeleeStance(SquadAI.MSTANCE_Ranged)
	end
end

----------------------------------------
-- File: 'titantactic.ai'
-- Edited by Cylarne @ 2012
-- Edited by Thudmeizer	@ 01.07.2016

class 'TitanTactic' (ChaosMarineVehicleTactic)



function TitanTactic:__init(squad_ai)
	super(squad_ai)

	self:SetName("Titan Tactic")
end

-- Titan DoAbilities
function TitanTactic:DoAbilities()
	-- Stomp them all!
	if (self.squad_ai:IsAttacking() and self.squad_ai:CanDoAbility(2443)) then -- stomp_id
		Ability.DoAbilityTarget(self.squad_ai, 2443, Ability.Filters.CloseSquadEnemy, 4)
	end

	-- Launch the crippling Apocalypse Missiles!
	if (self.squad_ai:CanDoAbility(1445)) then -- missiles_id
		Ability.DoAbilityPos(self.squad_ai, 1445, Ability.Filters.CloseEnemy, 24)
		Ability.DoAbilityPos(self.squad_ai, 1445, Ability.Filters.CloseVehicleEnemy, 3)
		Ability.DoAbilityPos(self.squad_ai, 1445, Ability.EntityFilters.CloseBaseEntityEnemy, 4)
	end

	-- Titan Stomp Mode
	if (self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) then
		if (self.squad_ai:CanDoAbility(2444)) then -- turret_id
			Ability.DoAbilityArea(self.squad_ai, 2444, Ability.Filters.CloseSquadEnemy, 10, 4)
			Ability.DoAbilityArea(self.squad_ai, 2444, Ability.Filters.CloseMonsterEnemy, 10, 4)
		end
	end
end

function TitanTactic:Upgrade()
	-- If there are no ressources available, don't upgrade!
	if (not Tactic.Options.can_reinforce) then
		return
	end

	local class_type = cpu_manager:FindClosestEnemyPlayer():GetMajorityClassType()
	self.squad_ai:DoBestUpgrade(class_type)
end
